时间复杂度：
	
	一般情况下，算法的基本操作重复执行的次数是模块n的某一个函数f(n)，因此，算法的时间复杂度记做：T(n)=O(f(n))
分析：随着模块n的增大，算法执行的时间的增长率和 f(n) 的增长率成正比，所以 f(n) 越小，算法的时间复杂度越低，算法的效率越高。
	

	用大写O()来体现算法的时间复杂度的记法，叫大O记法。
	
	按数量级递增排列，常见的时间复杂度有：
		常数阶O(1),对数阶O(log2n),线性阶O(n),
		线性对数阶O(nlog2n),平方阶O(n^2)，立方阶O(n^3),...，
		k次方阶O(n^k),指数阶O(2^n)。随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。
		
==============================

线性表


==============================

栈与队列


==============================

串


==============================

树


==============================

图



			